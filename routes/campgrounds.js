var express = require("express");
var router = express.Router();
var CampGround = require("../models/campgrounds"),
    middleware = require("../middleware"),
    Comment    = require("../models/comments");
    

router.get("/campgrounds", function(req, res){
    console.log(req.user);
    //get all campgrounds from dbs
    CampGround.find({}, function(err, allCampGrounds){
        if(err){
            console.log(err)
        }else{
            //render our campgrounds from the database
        res.render("campgrounds/index", {campGrounds: allCampGrounds, currentUser: req.user});

        }
    })
        
        //res.render("campgrounds", {campGrounds: campGrounds});
})

router.post("/campgrounds", middleware.isLoggedIn, function(req, res){
    //get data from form and add to campgrounds array
    let name  = req.body.name;
    let image = req.body.image;
    let descr  = req.body.descr;
    let author = {
        id: req.user._id,
        username: req.user.username
    }
    
    let newCampground = {name: name, image: image, desc: descr, author: author}
    //add new campground to db
    CampGround.create(newCampground, function(err, newlyCreated){
        if(err){
            console.log("error entering" + newlyCreated)
        }else{
            console.log("success entering:" + newlyCreated)
            
        //redirect back to campgrounds page
        console.log("author is" + newlyCreated.author.username);
        res.redirect("/campgrounds");
        }
    });

})

router.get("/campgrounds/new", middleware.isLoggedIn, function(req, res) {
    res.render("campgrounds/new");
})


//SHOW - shows more info about a campground
router.get("/campgrounds/:id", function(req, res){
    //find the campground with providedd id
    //capture id provided from our href generated by index.ejs campGrounds
    CampGround.findById(req.params.id).populate("comments").exec(function(err, foundCampground){
        if(err){
            console.log("something went wrong with retrieving by ID")
        }else{
            res.render("campgrounds/show", {campground: foundCampground });
        }
    });
})

// EDIT Campground ROUTE
router.get("/campgrounds/:id/edit", middleware.checkCampgroundOwnerShip, function(req,res){
    //is user logged in at all?
    CampGround.findById(req.params.id,  function(err, foundCampground) {
        if(err){
            req.flash("error" , "Campground Not Found");
            console.log("error finding user id on edit route" + err)
        }else{
             res.render("campgrounds/edit", {campground: foundCampground});  //if user === author THEN allow to edit campground
        }
    })
                                                     /////TODO DESC not updating..fix
      //does user own campground?
      
    //if not redirec
})

//Update Campground Route
router.put("/campgrounds/:id", middleware.checkCampgroundOwnerShip, function(req, res){
    //find and update the correct campground
    CampGround.findByIdAndUpdate(req.params.id, req.body.campground, function(err, updatedCampground){
        if(err){
            console.log("error updating campground");
            res.redirect("/campgrounds");
        }else{
            console.log("campground updated");
            res.redirect("/campgrounds/"+ req.params.id);
        }
    })
})

//DESTROY CAMPGROUND ROUTE
router.delete("/campgrounds/:id", middleware.checkCampgroundOwnerShip, function(req, res){
    CampGround.findByIdAndRemove(req.params.id, function(err){
        if(err){
            res.redirect("/campgrounds")
        }else{
            res.redirect("/campgrounds");
        }
    })
})

// function isLoggedIn(req, res , next){
//     if( req.isAuthenticated()){
//         return next();
//     }
//     res.redirect("/login");
// }

//////////////MIDDLEWARE\\\\\\\\\\\\\\\\\\\\\
// function checkCampgroundOwnerShip(req, res, next){
//     if(req.isAuthenticated()){ //check if user logged in
//             CampGround.findById(req.params.id, function(err, foundCampground){ //grab current id from DB
//         if(err){
//             res.redirect("back")
                
//             }else{
//                 //does user own campground?
//             if(foundCampground.author.id.equals(req.user._id)){ //check if use that is attempting to edit campground is the author
//                 next(); //move onto next code to be implemented ONLY after middleware checks ownership
//             }else{
//                 res.redirect("back");
//             }                                                        /////TODO DESC not updating..fix
//         }
        
//     });
        
//     }else{
//         res.redirect("back");
//     }
// }


module.exports = router;